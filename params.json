{"name":"Appbase","tagline":"A lightweight backend for Web/iOS/Android apps.","body":"[![Build Status](https://travis-ci.org/bestmike007/appbase.svg?branch=master)](https://travis-ci.org/bestmike007/appbase)\r\n[![Code Climate](https://codeclimate.com/github/bestmike007/appbase/badges/gpa.svg)](https://codeclimate.com/github/bestmike007/appbase)\r\n[![Test Coverage](https://codeclimate.com/github/bestmike007/appbase/badges/coverage.svg)](https://codeclimate.com/github/bestmike007/appbase)\r\n[![Gem Version](https://badge.fury.io/rb/appbase.svg)](http://badge.fury.io/rb/appbase)\r\n\r\nNowadays BaaS and mBaaS platforms (e.g. [firebase](https://www.firebase.com/), [parse](https://www.parse.com/), [appbase.io](https://appbase.io/)) abound. Open source solutions (e.g. [usergrid](http://usergrid.incubator.apache.org/) using LAMP, [helios](http://helios.io/) using Ruby, [deployd](http://deployd.com/) and [StrongLoop](http://strongloop.com/) using nodejs, and a lot more) are also available. And appbase is much less than those.\r\n\r\nWhat is appbase? Appbase is a lightweight backend based on rails for rubyists with the following basic features:\r\n\r\n+ User registration and authentication\r\n+ REST model crud api\r\n+ Expose business logic with a simple line of code\r\n+ 3rd party authentication\r\n+ Push notifications\r\n+ Payment integration\r\n+ Other basic features mostly required by apps\r\n\r\nAppbase is/does not:\r\n\r\n+ Use GUI to configure models and/or business logic\r\n+ Use configuration files\r\n\r\nAppbase is under development; and will be kept as simple as possible.\r\n\r\n## Basic Usage\r\n\r\nConfigure in `application.rb`:\r\n\r\n``` ruby\r\n  # enable appbase\r\n  config.appbase.enabled = true\r\n  # default: '/appbase'\r\n  # config.appbase.mount = \"/_api\"\r\n  config.appbase.user_identity = :User # required\r\n  config.appbase.token_store = :cookies # :cookies, :headers, :params\r\n  config.appbase.token_key_user = :u\r\n  config.appbase.token_key_session = :s\r\n  config.appbase.models.push :User, :Role, :Permission, :UserProfile, :TodoItem, :GroupTodoList\r\n```\r\n\r\nImplement `UserIdentityModel#authenticate_by_token(user, token)`:\r\n\r\n``` ruby\r\n  class User < ActiveRecord::Base\r\n    def self.authenticate_by_token(user, token)\r\n      # TODO cache the result\r\n      User.find_by(user: user, token: token)\r\n    end\r\n  end\r\n```\r\n\r\nSet up CRUD permissions for models:\r\n\r\n``` ruby\r\n  class TodoItem < ActiveRecord::Base\r\n  \r\n    # Allow query\r\n    allow_query :mine\r\n    # or\r\n    allow_query :within => :related_to_me\r\n    def self.related_to_me(current_user)\r\n      TodoItem.where user_id: current_user.id\r\n    end\r\n    # or\r\n    allow_query :within do |current_user|\r\n      TodoItem.where user_id: current_user.id\r\n    end\r\n    \r\n    # Allow create/update/delete\r\n    allow_create :mine\r\n    # or\r\n    allow_update :if => :related_to_me?\r\n    def self.related_to_me?(current_user, obj)\r\n      obj.user_id == current_user.id\r\n    end\r\n    # or\r\n    allow_delete :if do |current_user, obj|\r\n      obj.user_id == current_user.id\r\n    end\r\n    \r\n    # restrict_query_columns usage:\r\n    #   restrict_query_columns <only | except>: <single_column | column_list>\r\n    # examples:\r\n    #   restrict_query_columns only: [:user_id, :created_at, :updated_at]\r\n    #   restrict_query_columns only: :updated_at\r\n    #   restrict_query_columns except: [:content]\r\n    restrict_query_columns only: [:updated_at, :created_at]\r\n    \r\n    # restrict_query_operators usage:\r\n    #   restrict_query_operators :column1, :column2, <only | except>: <:equal | :compare | :in>\r\n    # examples:\r\n    #   restrict_query_operators :user_id, :created_at, :updated_at, only: [:equal, :compare]\r\n    #   restrict_query_operators :user_id, :created_at, :updated_at, except: :in\r\n    #   restrict_query_operators :title, only: :equal\r\n    restrict_query_operators :updated_at, :created_at, except: :in\r\n    \r\n  end\r\n```\r\n\r\nExpose business logic methods:\r\n\r\n``` ruby\r\n  \r\n  # don't have to be an active record\r\n  class GroupTodoList\r\n  \r\n    include AppBase::ModelConcern\r\n    \r\n    expose_to_appbase :list_group_todos, auth: true # default to true\r\n    \r\n    def self.list_group_todos(current_user)\r\n      TodoItem.find_all group_id: current_user.group_id\r\n    end\r\n    \r\n  end\r\n  \r\n  # public methods, e.g. authentication, does not have the `current_user` parameter\r\n  class User < ActiveRecord::Base\r\n    \r\n    expose_to_appbase :authenticate, :external_auth, auth: false\r\n    \r\n    def self.authenticate(user, pass)\r\n      user = User.find_by username: user, password: pass\r\n      return nil if user.nil?\r\n      user.last_login = Time.now\r\n      user.session_token = SecureRandom.hex\r\n      user.save!\r\n      user.session_token\r\n    end\r\n    \r\n    def self.external_auth(user, options={})\r\n      case options[:provider]\r\n      when 'twitter'\r\n        # do authenticate\r\n      when 'facebook'\r\n        # do authenticate\r\n      else\r\n        raise \"unsupported provider\"\r\n      end\r\n    end\r\n    \r\n  end\r\n```\r\n\r\nAnd that's all. \r\n\r\n## The Request Scheme\r\n\r\nApps (including iOS app, Andriod app, web app with angularjs or similar frontend framework, etc.) are communicating with appbase using HTTP/HTTPS.\r\n\r\n### The REST API\r\n\r\nBasic CRUD api conforms to the representational state transfer (REST) architectural style. Following sections are using model `Note (id, title, content)` as an example to illustrate how a model is created, updated, deleted, and how to perform a query on a model (Supose that the appbase engine is mount on `/_api`).\r\n\r\n#### Create\r\n\r\nRequest to create a model with JSON serialized body:\r\n\r\n```\r\nPOST /_api/note HTTP/1.1\r\nHOST xxx\r\nContent-Type: application/json\r\n\r\n{ \"title\" : \"test\" , \"content\" : \"hello\", \"user_id\" : 1 }\r\n```\r\n\r\nThe server response on success:\r\n\r\n```\r\nHTTP/1.1 200 OK\r\n\r\n{\"status\":\"ok\",\"id\":1}\r\n```\r\n\r\nOn failure:\r\n\r\n```\r\nHTTP/1.1 200 OK\r\n\r\n{\"status\":\"error\",\"msg\":\"error_msg\"}\r\n```\r\n\r\n#### Update\r\n\r\nAlmost the same as create except for using `PUT` and adding the `:id` parameter (e.g. `/_api/note/:id`):\r\n\r\n```\r\nPUT /_api/note/1 HTTP/1.1\r\nHOST xxx\r\nContent-Type: application/json\r\n\r\n{ \"title\" : \"test\" , \"content\" : \"hello appabse!\", \"user_id\" : 1 }\r\n```\r\n\r\n#### Delete\r\n\r\n```\r\nDELETE /_api/note/1 HTTP/1.1\r\nHOST xxx\r\n```\r\n\r\n#### Query\r\n\r\nThe request:\r\n\r\n```\r\nGET /_api/note?p=1&ps=20 HTTP/1.1\r\nHOST xxx\r\n```\r\n\r\nIn the parameters, `p` indicates the page of the query; `ps` indicates the page size of the query. Except for the pagination parameters, query parameters are allowed to filter the query. Supose we need to perform a query on `Note.id`, here are some examples on how to query:\r\n\r\n+ /_api/note?p=1&ps=20`&id=1` Equal to 1\r\n+ /_api/note?p=1&ps=20`&id.lt=10` Less than 10\r\n+ /_api/note?p=1&ps=20`&id.le=10` Less than or equal to 10\r\n+ /_api/note?p=1&ps=20`&id.gt=1` Greater than 1\r\n+ /_api/note?p=1&ps=20`&id.ge=1` Greater than or equal to 1\r\n+ /_api/note?p=1&ps=20`&id.lt=10&id.ge=1` Greater than or equal to 1 and less than 10\r\n+ /_api/note?p=1&ps=20`&id.in=[1,2,3]` In 1, 2, 3\r\n+ /_api/note?p=1&ps=20`&id.nin=[1,2,3]` Not in 1, 2, 3\r\n+ /_api/note?p=1&ps=20`&id.n=true` Is null\r\n+ /_api/note?p=1&ps=20`&id.nn=true` Not null\r\n\r\n`OR` conditions are not supported for now, use exposed methods instead.\r\n\r\n### RPC Methods\r\n\r\nModel methods with custom business logic can be exposed as rpc methods, take the method `Note.related_to_me(current_user, limit)` as example.\r\n\r\n```\r\nPOST /_api/note/related_to_me HTTP/1.1\r\nHOST xxx\r\n\r\nlimit=10\r\n```\r\n\r\nResponse from the backend should be:\r\n\r\n```\r\nHTTP/1.1 200 OK\r\n\r\n{\"status\":\"ok\",\"data\":[{\"id\":1,\"key\":\"value\"},{\"id\":2,\"key\":\"value\"},{\"id\":3,\"key\":\"value\"}]}\r\n```\r\n\r\nIf the method is defined with an `options` parameter, e.g. `Note.related_to_me(current_user, options={})`, then optional request arguments are passed to the method within the option hash object.\r\n\r\n## Known Issues\r\n\r\n+ `OR` conditions are not supported for active record query\r\n+ Multiple accessible query base\r\n+ Write more test cases\r\n+ Complete the document\r\n\r\nYou're welcome to contribute to this project by creating an issue / a pull request.\r\n\r\n---\r\n\r\n## License\r\n\r\nAppbase is released under the [MIT License](http://opensource.org/licenses/MIT).\r\n","google":"UA-29233497-3","note":"Don't delete this file! It's used internally to help with page regeneration."}